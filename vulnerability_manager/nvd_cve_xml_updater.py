#!/usr/bin/python3

from django.db import transaction
from dateutil.parser import parse as parse_date
from vulnerability_manager.cve_xml_parser import CveXmlParser
from vulnerability_manager.models import Cve, Cwe, Cpe, Reference
from vulnerability_manager import cpe_updater
from vigilate_backend import alerts
import itertools
import subprocess
import datetime
import requests
import os

class NvdCveXmlUpdater():

    def __init__(self):
        self.path = os.path.dirname(os.path.realpath(__file__)) + "/nvd_db/"
        pass

    def update_all(self, include_years=True, use_existing_files=False):
        if not os.path.isdir(self.path):
            os.mkdir(self.path)

        current_year = int(datetime.datetime.now().year)
        if include_years:
            start_year = 2012
        else:
            start_year = current_year + 1
            
        for y in list(range(start_year, current_year + 1)) + ["Recent", "Modified"]:
            self.update_file(str(y), use_existing_files)

    def update_recent(self):
        return self.update_all(False)

    def update_file(self, name, use_existing_files=False):
        base_url = "https://static.nvd.nist.gov/feeds/xml/cve/2.0/"
        meta_file = "nvdcve-2.0-%s.meta" % name
        xml_file = "nvdcve-2.0-%s.xml" % name
        gz_file = xml_file + ".gz"

        first_dl = False

        if not os.path.isfile(self.path + xml_file):
            first_dl = True

        if not first_dl and use_existing_files:
            return self.parse_xml(self.path + xml_file)

        if not first_dl:
            local_meta_content = open(self.path + meta_file, "r").read()
            local_updated_date = parse_date(self.get_value_meta(local_meta_content, "lastModifiedDate"))

        req = requests.get(base_url + meta_file)
        online_updated_date = parse_date(self.get_value_meta(req.content.decode("utf8"), "lastModifiedDate"))

        if not first_dl and local_updated_date == online_updated_date:
            return 0,0

        open(self.path + meta_file, "wb").write(req.content)
        expected_hash = self.get_value_meta(req.content.decode("utf8"), "sha256")

        req = requests.get(base_url + gz_file)
        open(self.path + gz_file, "wb").write(req.content)

        # Decompress file
        subprocess.call(["gunzip", "-f", self.path + gz_file])
            
        # Check file hash
        hsh = subprocess.check_output(["sha256sum", self.path + xml_file]).decode("utf8").split(" ")[0]

        return self.parse_xml(self.path + xml_file)


    def parse_xml(self, filepath):
        parser = CveXmlParser()
        # parse and update db
        parsed = parser.parse(filepath)
        return self.createOrUpdateCveList(parsed)

    def createOrUpdateCveList(self, cve_list):

        to_add = []
        to_add_rela = []
        to_create_ref = []
        cpe_from_cve_to_update = set()
        for cve in cve_list:

            if Cve.objects.filter(cveid=cve["cveid"]).exists():
                try:
                    update_cve = Cve.objects.get(cveid=cve["cveid"],
                                                 modified_date__lt=cve["modified_date"].date())
                    update_cve.published_date=cve["published_date"]
                    update_cve.modified_date=cve["modified_date"]
                    cvss_score=cve["cvss_score"]
                    update_cve.cvss=cve["cvss"]
                    update_cve.summary=cve["summary"]
                    try:
                        update_cve.cwe=Cwe.objects.get(cweid=cve["cwe"])
                    except Cwe.DoesNotExist:
                        pass

                    to_add_rela.append((cve["cveid"], cve["cpes"]))
                    for cpe in cve["cpes"]:
                        cpe_from_cve_to_update.add(cpe)

                    for ref in cve["references"]:
                        if not Reference.objects.filter(source=ref["source"],
                                                    value=ref["value"],
                                                    href=ref["href"],
                                                    cve=update_cve).exists():
                            to_create_ref.append((cve["cveid"], ref))
                    
                except Cve.DoesNotExist:
                    pass

            else:
                new_cve = Cve(cveid=cve["cveid"],
                              published_date=cve["published_date"],
                              modified_date=cve["modified_date"],
                              cvss_score=cve["cvss_score"],
                              cvss=cve["cvss"],
                              summary=cve["summary"],
                )
                try:
                    new_cve.cwe=Cwe.objects.get(cweid=cve["cwe"])
                except Cwe.DoesNotExist:
                    pass
                to_add.append(new_cve)
                to_add_rela.append((cve["cveid"], cve["cpes"]))
                for cpe in cve["cpes"]:
                    cpe_from_cve_to_update.add(cpe)

                for ref in cve["references"]:
                    to_create_ref.append((cve["cveid"], ref))
                    

        Cve.objects.bulk_create(to_add)
        dict_cpe = cpe_updater.get_cpe_dict_from_cpes(cpe_from_cve_to_update)
        
        for rela in to_add_rela:
            new_cve = Cve.objects.get(cveid=rela[0])
            new_cve.cpe.set([dict_cpe[x] for x in rela[1]])
            alerts.check_cve(new_cve)

        to_bulk_ref = []
        for cveid, ref in to_create_ref:
            to_bulk_ref.append(Reference(source=ref["source"],
                                         value=ref["value"],
                                         href=ref["href"],
                                         cve=Cve.objects.get(cveid=cveid)
            ))

        Reference.objects.bulk_create(to_bulk_ref)

    def get_value_meta(self, meta_content, key):
        for line in meta_content.split("\n"):
            k,v = line.split(":", 1)
            if k == key:
                return v
        return ""
