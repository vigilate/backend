#!/usr/bin/python3

from django.db import transaction
from dateutil.parser import parse as parse_date
from vulnerability_manager.cve_xml_parser import CveXmlParser
from vulnerability_manager.models import Cve, Cpe
from vulnerability_manager import cpe_updater
import itertools
import subprocess
import datetime
import requests
import os

class NvdCveXmlUpdater():

    def __init__(self):
        self.path = os.path.dirname(os.path.realpath(__file__)) + "/nvd_db/"
        pass

    def update_all(self, include_years=True, use_existing_files=False):
        if not os.path.isdir(self.path):
            os.mkdir(self.path)

        total_created = 0
        total_updated = 0
        current_year = int(datetime.datetime.now().year)
        if include_years:
            #start_year = 2002
            start_year = 2015
        else:
            start_year = current_year + 1
            
        for y in list(range(start_year, current_year + 1)) + ["Recent", "Modified"]:
            nb_created,nb_updated = self.update_file(str(y), use_existing_files)
            total_created += nb_created
            total_updated += nb_updated
        return total_created, total_updated

    def update_recent(self):
        return self.update_all(False)

    def update_file(self, name, use_existing_files=False):
        base_url = "https://static.nvd.nist.gov/feeds/xml/cve/2.0/"
        meta_file = "nvdcve-2.0-%s.meta" % name
        xml_file = "nvdcve-2.0-%s.xml" % name
        gz_file = xml_file + ".gz"

        first_dl = False

        if not os.path.isfile(self.path + xml_file):
            first_dl = True

        if not first_dl and use_existing_files:
            print("Parsing %s" % xml_file)
            return self.parse_xml(self.path + xml_file)

        if not first_dl:
            local_meta_content = open(self.path + meta_file, "r").read()
            local_updated_date = parse_date(self.get_value_meta(local_meta_content, "lastModifiedDate"))

        req = requests.get(base_url + meta_file)
        online_updated_date = parse_date(self.get_value_meta(req.content.decode("utf8"), "lastModifiedDate"))

        if not first_dl and local_updated_date == online_updated_date:
            return 0,0

        if not first_dl:
            print("Online version of %s more recent" % name)

        open(self.path + meta_file, "wb").write(req.content)
        expected_hash = self.get_value_meta(req.content.decode("utf8"), "sha256")

        print("Downloading: %s" % (base_url + gz_file))
        req = requests.get(base_url + gz_file)
        open(self.path + gz_file, "wb").write(req.content)

        # Decompress file
        subprocess.call(["gunzip", "-f", self.path + gz_file])
            
        # Check file hash
        hsh = subprocess.check_output(["sha256sum", self.path + xml_file]).decode("utf8").split(" ")[0]
        if hsh != expected_hash:
            print("Error: corrupted file %s" % (self.path + xml_file))

        return self.parse_xml(self.path + xml_file)


    def parse_xml(self, filepath):
        parser = CveXmlParser()
        # parse and update db
        parsed = parser.parse(filepath)
        return self.createOrUpdateCveList(parsed)

    def createOrUpdateCveList(self, cve_list):

        nb_created = 0
        nb_updated = 0
        to_add = []
        to_add_rela = []

        start_time_all = datetime.datetime.now()
        start_time_check = datetime.datetime.now()
        cpe_from_cve_to_update = set()
        for cve in cve_list:

            if Cve.objects.filter(cveid=cve["cveid"]).exists():
                try:
                    update_cve = Cve.objects.get(cveid=cve["cveid"],
                                                 modified_date__lt=cve["modified_date"].date())
                    # if cve["modified_date"].date() > update_cve.modified_date:
                    nb_updated += 1
                    update_cve.published_date=cve["published_date"]
                    update_cve.modified_date=cve["modified_date"]
                    cvss_score=cve["cvss_score"]
                    update_cve.cvss=cve["cvss"]
                    update_cve.summary=cve["summary"]

                    to_add_rela.append((cve["cveid"], cve["cpes"]))
                    for cpe in cve["cpes"]:
                        cpe_from_cve_to_update.add(cpe)
                except Cve.DoesNotExist:
                    pass

            else:
                nb_created += 1
                new_cve = Cve(cveid=cve["cveid"],
                              published_date=cve["published_date"],
                              modified_date=cve["modified_date"],
                              cvss_score=cve["cvss_score"],
                              cvss=cve["cvss"],
                              summary=cve["summary"],
                )
                to_add.append(new_cve)
                to_add_rela.append((cve["cveid"], cve["cpes"]))
                for cpe in cve["cpes"]:
                    cpe_from_cve_to_update.add(cpe)

        end_time_check = datetime.datetime.now()

        start_time_bulk = datetime.datetime.now()
        Cve.objects.bulk_create(to_add)
        end_time_bulk = datetime.datetime.now()

        start_time_getcpefunction = datetime.datetime.now()
        cpe_updater.create_missing_cpe(cpe_from_cve_to_update)
        end_time_getcpefunction = datetime.datetime.now()


        start_time_addrela = datetime.datetime.now()
        for rela in to_add_rela:
            new_cve = Cve.objects.get(cveid=rela[0])
            new_cve.cpe.set(rela[1])
        end_time_addrela = datetime.datetime.now()
        end_time_all = datetime.datetime.now()

        print("#" * 20)
        print("Len cve_list: %d" % len(cve_list))
        print("Len cpe_to_update: %d" % len(cpe_from_cve_to_update))
        print("Len to_add: %d" % len(to_add))
        print("Updated: %d" % nb_updated)
        print("=" * 20)
        print("Total time: %.2f" % (end_time_all-start_time_all).total_seconds())
        print("Check time: %.2f" % (end_time_check-start_time_check).total_seconds())
        print("Bulk time: %.2f" % (end_time_bulk-start_time_bulk).total_seconds())
        print("Func time: %.2f" % (end_time_getcpefunction-start_time_getcpefunction).total_seconds())
        print("Rela time: %.2f" % (end_time_addrela-start_time_addrela).total_seconds())
        print("#" * 20)
        
        
        return nb_created, nb_updated

    def get_value_meta(self, meta_content, key):
        for line in meta_content.split("\n"):
            k,v = line.split(":", 1)
            if k == key:
                return v
        return ""
