#!/usr/bin/python3

from dateutil.parser import parse as parse_date
import subprocess
import datetime
import requests
import os

class NvdCveXmlUpdater():

    def __init__(self):
        self.path = os.path.dirname(os.path.realpath(__file__)) + "/nvd_db/"
        pass

    def update_all(self):
        if not os.path.isdir(self.path):
            os.mkdir(self.path)

        current_year = int(datetime.datetime.now().year)
        for y in range(2015, current_year + 1):
            self.update_year(y)

    def update_year(self, year):
        base_url = "https://static.nvd.nist.gov/feeds/xml/cve/2.0/"
        meta_file = "nvdcve-2.0-%d.meta" % year
        xml_file = "nvdcve-2.0-%d.xml" % year
        gz_file = xml_file + ".gz"

        first_dl = False

        if not os.path.isfile(self.path + xml_file):
            first_dl = True

        if not first_dl:
            local_meta_content = open(self.path + meta_file, "r").read()
            local_updated_date = parse_date(self.get_value_meta(local_meta_content, "lastModifiedDate"))

        req = requests.get(base_url + meta_file)
        online_updated_date = parse_date(self.get_value_meta(req.content.decode("utf8"), "lastModifiedDate"))

        if not first_dl and local_updated_date == online_updated_date:
            return

        if not first_dl:
            print("Online version of %d more recent" % year)

        open(self.path + meta_file, "wb").write(req.content)
        expected_hash = self.get_value_meta(req.content.decode("utf8"), "sha256")

        print("Downloading: %s" % (base_url + gz_file))
        req = requests.get(base_url + gz_file)
        open(self.path + gz_file, "wb").write(req.content)

        # Decompress file
        subprocess.call(["gunzip", "-f", self.path + gz_file])
            
        # Check file hash
        hsh = subprocess.check_output(["sha256sum", self.path + xml_file]).decode("utf8").split(" ")[0]
        if hsh != expected_hash:
            print("Error: corrupted file %s" % (self.path + xml_file))

        self.parse_xml(self.path + xml_file)


    def parse_xml(self, filepath):
        pass


    def get_value_meta(self, meta_content, key):
        for line in meta_content.split("\n"):
            k,v = line.split(":", 1)
            if k == key:
                return v
        return ""
    
