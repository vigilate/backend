#!/bin/python3

import pprint
import argparse
import xml.etree.ElementTree as etree
from dateutil.parser import parse as parse_date

class CveXmlParser():

    NS = {"scap-core": "http://scap.nist.gov/schema/scap-core/0.1",
          "cvss": "http://scap.nist.gov/schema/cvss-v2/0.2",
          "vuln": "http://scap.nist.gov/schema/vulnerability/0.4",
          "xsi": "http://www.w3.org/2001/XMLSchema-instance",
          "patch": "http://scap.nist.gov/schema/patch/0.1",
          "default": "http://scap.nist.gov/schema/feed/vulnerability/2.0",
          "cpe-lang": "http://cpe.mitre.org/language/2.0"
    }


    def __init__(self):
        pass

    def parse(self, filename):
        tree = etree.parse(filename)
        root = tree.getroot()
        for entry in root.findall("default:entry", NS):
            cve = {}
            cve["cveid"] = entry.find("vuln:cve-id", NS).text
        
            try:
                cve["cwe"] = entry.find("vuln:cwe", NS).get("id")
            except AttributeError:
                cve["cwe"] = ""
                pass

            cve["published_date"] = parse_date(entry.find("vuln:published-datetime", NS).text)
            cve["modified_date"] = parse_date(entry.find("vuln:last-modified-datetime", NS).text)

            try:
                cvss_base = entry.find("vuln:cvss", NS).find("cvss:base_metrics", NS)
                cve["cvss_score"] = cvss_base.find("cvss:score", NS).text

                cve["cvss"] = "/".join("%s:%s" % (k,cvss_base.find("cvss:%s" % k, NS).text)
                                       for k in ["access-vector", "access-complexity",
                                                 "authentication", "confidentiality-impact",
                                                 "integrity-impact", "availability-impact"])
            except AttributeError:
                cve["cvss_score"] = ""
                cve["cvss"] = ""

            try:
                cpes = []
                for cpe in entry.find("vuln:vulnerable-software-list", NS).findall("vuln:product", NS):
                    cpes.append(cpe.text)
                cve["cpes"] = cpes
            except AttributeError:
                cve["cpes"] = ""

            self.createOrUpdateCve(cve):
            
        def createOrUpdateCve(self, cve):
            pass
            
        


