import requests
import xml.etree.ElementTree as etree
from vulnerability_manager.models import Cpe

xml_url = "http://static.nvd.nist.gov/feeds/xml/cpe/dictionary/official-cpe-dictionary_v2.3.xml"

def do_update():
    r = requests.get(xml_url)

    # raise exception is return code != 200
    r.raise_for_status()

    cpes = []
    root = etree.fromstring(r.text)
    for child in root:
        if 'cpe-item' in child.tag:
            cpes.append(child.attrib['name'])

    return cpes

def get_cpes_from_name_version(name, version, up_to_date):
    cpes_tmp = Cpe.objects.filter(product=name)

    cpes_ret = []
    cpes_gen = []
    for cpe in cpes_tmp:
        if version == cpe.version:
            cpes_ret.append(cpe)
        if cpe.version == '-':
            cpes_gen.append(cpe)

    if not cpes_ret and not up_to_date:
        do_update()
        return get_cpes_from_name_version(name, version, True)

    if not cpes_ret:
        if cpes_gen:
            cpes_ret.append(Cpe(cpe="%s:%s" % (name, version), version=version, product=name))
        else:
            cpes_ret.append(Cpe(cpe="%s:%s" % (name, version), version=version, product=name))
        cpes_ret[0].save()

    return (cpes_ret + cpes_gen, up_to_date)


def create_missing_cpe(cpes_ask):
    cpes_ask = set(cpes_ask)
    cpes = set()
    cpe_to_create = []

    for cpe in cpes_ask:
        parts = cpe.split(':')
        if len(parts) < 5:
            parts += ["-"] * (5 - len(parts))
        cpes.add("%s:%s" % (parts[3], parts[4]))

    # get known cpe
    for cpe in cpes:
        try:
            Cpe.objects.get(cpe=cpe)
        except Cpe.DoesNotExist:
            cpe_to_create.append(cpe)

    cpe_to_bulk = []
    # create unknown cpe
    for cpe in cpe_to_create:
        cpe_to_bulk.append(Cpe(cpe=cpe, product=parts[3], version = parts[4]))

    Cpe.objects.bulk_create(cpe_to_bulk)

def get_cpe_dict_from_cpes(cpes_ask):
    obj_map = {}
    obj_map_corr = {}

    for cpe in cpes_ask:
        parts = cpe.split(':')
        if len(parts) < 5:
            parts += [""] * (5 - len(parts))
        obj_map[cpe] = None
        obj_map_corr[cpe] = '%s:%s' % (parts[3], parts[4])

    cpe_to_create = []

    # get known cpe
    for cpe in obj_map:
        try:
            obj_map[cpe] = Cpe.objects.get(cpe=obj_map_corr[cpe])
        except Cpe.DoesNotExist:
            cpe_to_create.append(cpe)

    # create unknown cpe
    for cpe in cpe_to_create:
        parts = obj_map_corr[cpe].split(':')
        obj_map[cpe] = Cpe(cpe=obj_map_corr[cpe], product=parts[0], version = parts[1])

    Cpe.objects.bulk_create(set([obj_map[cpe] for cpe in cpe_to_create]))

    return obj_map_corr
