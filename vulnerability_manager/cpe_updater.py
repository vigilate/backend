import requests
import xml.etree.ElementTree as etree
from vulnerability_manager.models import Cpe

xml_url = "http://static.nvd.nist.gov/feeds/xml/cpe/dictionary/official-cpe-dictionary_v2.3.xml"

def do_update():
    r = requests.get(xml_url)

    # raise exception is return code != 200
    r.raise_for_status()

    cpes = []
    root = etree.fromstring(r.text)
    for child in root:
        if 'cpe-item' in child.tag:
            cpes.append(child.attrib['name'])

    return cpes

def get_cpe_from_cpe(cpe_ask):
    try:
        cpe = Cpe.objects.get(cpe = cpe_ask)
        return cpe
    except Cpe.DoesNotExist:
        parts = cpe_ask.split(':')
        if len(parts) < 5:
            parts += [""] * (5 - len(parts))
        cpe = Cpe(cpe=cpe_ask, vendor=parts[2], product=parts[3], version = parts[4])
        cpe.save()
        return cpe


def get_cpes_from_name_version(name, version, up_to_date):
    cpes_tmp = Cpe.objects.filter(product__contains=name)

    cpes_ret = []
    cpes_gen = []
    for cpe in cpes_tmp:
        if not name.startswith(cpe.product):
            continue
        if version == cpe.version:
            cpes_ret.append(cpe)
        if cpe.version == '-':
            cpes_gen.append(cpe)

    if not cpes_ret and not up_to_date:
        do_update()
        return get_cpes_from_name_version(name, version, True)

    if not cpes_ret:
        if cpes_gen:
            cpes_ret.append(Cpe(cpe="cpe:/a:%s:%s:%s" % (cpes_gen[0].vendor, name, version), version=version, product=name, vendor=cpes_gen[0].vendor))
        else:
            cpes_ret.append(Cpe(cpe="cpe:/a:-:%s:%s" % (name, version), version=version, product=name, vendor='-'))
        cpes_ret[0].save()

    return (cpes_ret + cpes_gen, up_to_date)


def get_cpe_dict_from_cpes(cpes_ask):
    obj_map = {}

    for cpe in cpes_ask:
        obj_map[cpe] = None

    cpe_to_create = []

    # get known cpe
    for cpe in obj_map:
        try:
            obj_map[cpe] = Cpe.objects.get(cpe = cpe)
        except Cpe.DoesNotExist:
            cpe_to_create.append(cpe)

    # create unknown cpe
    for cpe in cpe_to_create:
        parts = cpe.split(':')
        if len(parts) < 5:
            parts += [""] * (5 - len(parts))
        obj_map[cpe] = Cpe(cpe=cpe, vendor=parts[2], product=parts[3], version = parts[4])

    Cpe.objects.bulk_create([obj_map[cpe] for cpe in cpe_to_create])

    return obj_map
