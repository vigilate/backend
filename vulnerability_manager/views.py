from django.shortcuts import render
from django.http import HttpResponse, HttpResponseServerError
from vulnerability_manager.models import Cpe
from vulnerability_manager import cpe_updater
from vulnerability_manager.nvd_cve_xml_updater import NvdCveXmlUpdater
import requests

def is_localhost(request):
    ip = request.META.get('REMOTE_ADDR')
    return ip == '127.0.0.1'

def update_cpe(request):

    # limiting this view to a localhost
    if not is_localhost(request):
        return HttpResponse(status=401)

    try:
        cpes = cpe_updater.do_update()
    except requests.RequestException as e:
        return HttpResponseServerError()
    cpe_to_save = []

    for cpe in cpes:
        # cpe already exist
        if Cpe.objects.filter(cpe = cpe).exists():
            continue
        parts = cpe.split(':')
        if parts[1] == '/h':
            continue
        new_cpe = Cpe(cpe=cpe, vendor=parts[2], product=parts[3], version = parts[4])
        cpe_to_save.append(new_cpe)
    Cpe.objects.bulk_create(cpe_to_save)
    return HttpResponse(status=200)

def update_all_cve(request):
    # limiting this view to a localhost
    if not is_localhost(request):
        return HttpResponse(status=401)
    
    updater = NvdCveXmlUpdater()
    updater.update_all()
    return HttpResponse(status=200)

def update_recent_cve(request):
    # limiting this view to a localhost
    if not is_localhost(request):
        return HttpResponse(status=401)
    
    updater = NvdCveXmlUpdater()
    updater.update_recent()
    return HttpResponse(status=200)


def update_all_cve_using_files(request):
    # limiting this view to a localhost
    if not is_localhost(request):
        return HttpResponse(status=401)
    
    updater = NvdCveXmlUpdater()
    updater.update_all(True, True)
    return HttpResponse(status=200)
